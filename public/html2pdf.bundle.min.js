/*! html2pdf.custom.js – basierend auf html2pdf.js v0.10.1 – angepasst für Bewerbung 4789 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.html2pdf = factory();
  }
})(this, function () {

  const html2pdf = function(src, opt) {
    return new Html2Pdf(src, opt);
  };

  html2pdf.create = function(src, opt) {
    return new Html2Pdf(src, opt);
  };

  class Html2Pdf {
    constructor(src, opt = {}) {
      this.src = src;
      this.opt = opt;

      this.defaults = {
        margin:       0.5,
        filename:     'bewerbung_dossier.pdf',
        image:        { type: 'jpeg', quality: 0.98 },
        html2canvas:  { scale: 2 },
        jsPDF:        { unit: 'in', format: 'a4', orientation: 'portrait' }
      };

      this.opt = Object.assign({}, this.defaults, this.opt);
    }

    set(opt) {
      this.opt = Object.assign(this.opt, opt);
      return this;
    }

    from(source) {
      this.src = source;
      return this;
    }

    save() {
      return this._toPdf('save');
    }

    outputPdf() {
      return this._toPdf('outputPdf');
    }

    _toPdf(action) {
      const element = (typeof this.src === 'string') ?
        document.querySelector(this.src) : this.src;

      const opt = this.opt;

      return html2canvas(element, opt.html2canvas).then(canvas => {
        const imgData = canvas.toDataURL('image/' + opt.image.type, opt.image.quality);
        const pdf = new jsPDF(opt.jsPDF);

        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = pdf.internal.pageSize.getHeight();

        const imgProps = {
          width: canvas.width / window.devicePixelRatio,
          height: canvas.height / window.devicePixelRatio
        };

        const ratio = Math.min(pdfWidth / imgProps.width, pdfHeight / imgProps.height);
        const imgWidth = imgProps.width * ratio;
        const imgHeight = imgProps.height * ratio;

        const marginX = (pdfWidth - imgWidth) / 2;
        const marginY = (pdfHeight - imgHeight) / 2;

        pdf.addImage(imgData, opt.image.type, marginX, marginY, imgWidth, imgHeight);

        if (action === 'save') {
          pdf.save(opt.filename);
        } else {
          return pdf.output(opt.output || 'blob');
        }
      });
    }
  }

  return html2pdf;
});
// html2canvas (nur wenn nicht bereits geladen)
if (typeof html2canvas === 'undefined') {
  throw new Error('html2canvas is required but not loaded. Please include it before html2pdf.');
}

// jsPDF (nur wenn nicht bereits geladen)
if (typeof jsPDF === 'undefined') {
  throw new Error('jsPDF is required but not loaded. Please include it before html2pdf.');
}

// Export als globale Funktion
if (typeof window !== 'undefined') {
  window.html2pdf = function(src, opt) {
    return new Html2Pdf(src, opt).save();
  };
}
/*
 * Erweiterungsmöglichkeit: Metadaten, Seitenzahlen etc.
 * Optional: kann per pdf.setProperties, pdf.text, pdf.addPage usw. ergänzt werden
 */

// Beispiel: Setze PDF-Metadaten (Titel, Autor)
function setPdfMetadata(pdf, opt) {
  if (pdf.setProperties) {
    pdf.setProperties({
      title: opt.filename || 'Bewerbung',
      subject: 'Bewerbungsunterlagen Raphael Lauper',
      author: 'Raphael Lauper',
      creator: 'html2pdf.custom.js',
      keywords: 'bewerbung, dossier, lauper, 4789'
    });
  }
}

// Beispiel: Seitenzahlen einfügen (optional)
function addPageNumbers(pdf) {
  const pageCount = pdf.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    pdf.setFontSize(10);
    pdf.text(`Seite ${i} von ${pageCount}`, pdf.internal.pageSize.getWidth() - 50, pdf.internal.pageSize.getHeight() - 10);
  }
}
/*
 * Erweiterte PDF-Erzeugung – kombiniert Metadaten & Seitennummern
 * Diese Funktion ersetzt _toPdf bei Bedarf
 */

function generateCustomPdf(element, opt = {}) {
  return html2canvas(element, opt.html2canvas).then(canvas => {
    const imgData = canvas.toDataURL('image/jpeg', opt.image.quality || 0.98);
    const pdf = new jsPDF(opt.jsPDF || { unit: 'in', format: 'a4', orientation: 'portrait' });

    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = pdf.internal.pageSize.getHeight();

    const imgProps = {
      width: canvas.width / window.devicePixelRatio,
      height: canvas.height / window.devicePixelRatio
    };

    const ratio = Math.min(pdfWidth / imgProps.width, pdfHeight / imgProps.height);
    const imgWidth = imgProps.width * ratio;
    const imgHeight = imgProps.height * ratio;

    const marginX = (pdfWidth - imgWidth) / 2;
    const marginY = (pdfHeight - imgHeight) / 2;

    pdf.addImage(imgData, 'JPEG', marginX, marginY, imgWidth, imgHeight);

    setPdfMetadata(pdf, opt);
    addPageNumbers(pdf);

    pdf.save(opt.filename || 'bewerbung_dossier.pdf');
  });
}
/*
 * Exportierte Funktion für den Button-Aufruf
 * Diese Methode wird global verfügbar gemacht
 */

function exportBewerbungAsPdf(selector = 'body') {
  const element = document.querySelector(selector);
  const customOptions = {
    filename: 'bewerbung_dossier.pdf',
    margin: 0.6,
    image: { type: 'jpeg', quality: 0.98 },
    html2canvas: { scale: 2 },
    jsPDF: { unit: 'in', format: 'a4', orientation: 'portrait' }
  };

  generateCustomPdf(element, customOptions);
}

// Automatische Bindung, falls du kein Framework nutzt
if (typeof window !== 'undefined') {
  window.exportBewerbungAsPdf = exportBewerbungAsPdf;
}
/*
 * Abschluss: Optional für Node.js oder Testumgebungen
 */
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    html2pdf,
    Html2Pdf,
    exportBewerbungAsPdf,
    setPdfMetadata,
    addPageNumbers,
    generateCustomPdf
  };
}

// Ende der html2pdf.custom.js – Version 4789
